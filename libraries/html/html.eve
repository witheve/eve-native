# HTML

## Shortcut Tags

~~~ eve
commit
  [#html/shortcut-tagname | tagname: (
    "div"
    "span"
    "button"
    "link"
    "input"
    "img"
    "a"
    "style"
    "label"
    "li"
    "ul"
    "ol"
    "audio"
    "source"
    "video"
    "table"
    "tr"
    "td"
    )]
end
~~~

~~~ eve
search
  [#html/shortcut-tagname tagname]
bind
  [#html/shortcut-tag shortcut: "html/{{tagname}}" tagname]
end
~~~

Decorate shortcut elements as html.
~~~ eve
search
  [#html/shortcut-tag shortcut: tag tagname]
  element = [tag]
bind
  element <- [#html/element tagname]
end
~~~


## Setup

Create a list of trigger and listener tags to send to the client if present.
~~~ eve
commit
  [#html/state-tag state: "html/focused" start-event: "html/event/focus" stop-event: "html/event/blur"]
  [#html/trigger-tag | trigger: (
    "html/trigger/focus"
    "html/trigger/blur")]
  [#html/listener-tag | listener: (
    "html/listener/hover"
    "html/listener/context-menu"
    "html/listener/key")]
end
~~~

## Logic

Create instances for each root.
~~~ eve
search
  element = [#html/root tagname]
bind
  [#html/instance element tagname]
end
~~~

Create an instance for each child of a rooted parent.
~~~ eve
search
  element = [#html/element tagname]
  parent = [#html/instance element: [#html/element children: element]]
bind
  [#html/instance element tagname parent]
end
~~~

Elements add their tags as classes
~~~ eve
search
  element = [#html/element tag]
  tag != "html/element"
  class = string/replace[text: tag replace: "/" with: "-"]
bind
  element.class += class
end
~~~

Elements with no parents are roots.
@NOTE: Without a `not(element.ns)`, this applies to SVG elements too...
~~~ eve
search
  element = [#html/element]
  not([#html/element children: element])
bind
  element += #html/root
end
~~~

Create an instance for children of external roots.
~~~ eve
search
  element = [#html/element tagname]
  parent = [#html/root/external children: element]
bind
  [#html/instance element tagname parent]
  parent += #html/element
end
~~~

Mark elements with a user-editable value as such.
~~~ eve
search
  elem = if input = [#html/element tagname: "input" type]
    type != "button"
    type != "checkbox"
    type != "submit"
    type != "radio"
    type != "range"
    then input
  if input = [#html/element tagname: "input"]
    not(input.type)
    then input
  if textarea = [#html/element tagname: "textarea"] then textarea
bind
  elem += #html/editable-value
end
~~~

Mark elements with a user-editable checked as such.
~~~ eve
search
  elem = [#html/element tagname: "input" type]
  checkable = if type = "checkbox" then "true" if type = "radio" then "true"
bind
  elem += #html/editable-checked
end
~~~

Elements with an editable value and an initial use it as the default value
~~~ eve
search
  input = [#html/editable-value initial]
  value = if input.value then input.value else initial

bind
  input.value += value
end
~~~

Elements with an editable checked and an initial use it as the default checked
~~~ eve
search
  input = [#html/editable-checked initial]
  checked = if input.checked then input.checked else initial
  not([#html/client-checked element: input])
bind
  input.checked += checked
end
~~~


## Events

Remove HTML events.
~~~ eve
search
  event = [#html/event]
commit
  event := none
end
~~~

Apply input value changes.
~~~ eve
search
  [#html/event/change element value]

commit
  element.value := value
  [#html/client-value element value]
end
~~~

Apply input checked changes.
~~~ eve
search
  [#html/event/change element checked: "true"]

commit
  element.checked := "true"
  [#html/client-checked element checked: "true"]
end
~~~

~~~ eve
search
  [#html/event/change element checked: "false"]

commit
  element.checked := none
  [#html/client-checked element checked: "false"]
end
~~~

Clear old `#html/client-value`s.
~~~ eve
search
  prev = [#html/client-value element value]
  element.value != value

commit
  prev := none
end
~~~

Clear old `#html/client-checked`s.
~~~ eve
search
  prev = [#html/client-checked element checked]
  element.checked != checked

commit
  prev := none
end
~~~

## State Management

When the start event for a state tag fires, add the state to the element.
~~~ eve
search
  [#html/state-tag state add-event]
  [#html/event tag: add-event element]
commit
  element.tag += state
end
~~~

When the stop event for a state tag fires, remove the state from the element.
~~~ eve
search
  [#html/state-tag state stop-event]
  [#html/event tag: stop-event element]
commit
  element.tag -= state
end
~~~

## Trigger Management

Clean up triggers after the client executes them.
~~~ eve
search
  [#html/event/trigger trigger element]
commit
  element.tag -= trigger
end
~~~


## Exports

Export all instances.
~~~ eve
search
  instance = [#html/instance tagname element]
  ns = if n = element.ns then n else ""
watch client/websocket
  ("html/export instances" instance element tagname ns)
end
~~~

Export roots.
~~~ eve
search
  instance = [#html/instance element]
  element = [#html/root]
watch client/websocket
  ("html/export roots" instance)
end
~~~

Export instance parents.
~~~ eve
search
  instance = [#html/instance parent]
watch client/websocket
  ("html/export parents" instance parent)
end
~~~

Export element styles.
~~~ eve
search
  element = [#html/element style]
  lookup[entity: style attribute value]

watch client/websocket
  ("html/export styles" style attribute value)
end
~~~

Export element attributes.
~~~ eve
search
  instance = [#html/instance element]
  lookup[entity: element attribute value]
  attribute != "tag"
  attribute != "value"

watch client/websocket
  ("html/export attributes" instance attribute value)
end
~~~

Export values not from client.
~~~ eve
search
  instance = [#html/instance element]
  element = [#html/element value]
  not([#html/client-value element value])

watch client/websocket
  ("html/export attributes" instance "value" value)
end
~~~

Export checkeds not from client.
~~~ eve
search
  instance = [#html/instance element]
  element = [#html/element tagname: "input"]
  checked = if c = element.checked then c else "false"
  not([#html/client-checked element checked])

watch client/websocket
  ("html/export attributes" instance "checked" checked)
end
~~~

Export listeners.
~~~ eve
search
  [#html/listener-tag listener]
  element = [#html/element tag: listener]
  instance = [#html/instance element]

watch client/websocket
  ("html/export listeners" instance listener)
end
~~~

~~~ eve
search
  element = [#html/element #html/listener/key captured-key]
  instance = [#html/instance element]

watch client/websocket
  ("html/export captured keys" instance captured-key)
end
~~~


Export triggers.
~~~ eve
search
  [#html/trigger-tag trigger]
  element = [#html/element tag: trigger]

watch client/websocket
  ("html/export triggers" element trigger)
end
~~~

Redirect to a url.
~~~ eve
search
  [#html/redirect url]
watch client/websocket
  ("html/redirect" url)
end